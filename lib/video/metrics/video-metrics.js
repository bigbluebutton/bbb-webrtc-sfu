/*
 *  sfu_video_websockets: gauge
 *  sfu_video_websocket_requests: counter
 *  sfu_video_websocket_errors: counter
 *  sfu_video_module_crashes: counter
 *  sfu_video_module_status: gauge
 */

const { Gauge, Counter, } = require('prom-client');
const { injectMetrics, VideoPrometheusAgent } = require('./index.js');

const SFUV_NAMES = {
  SESSIONS: 'sfu_video_sessions',
  REQS: 'sfu_video_reqs_total',
  ERRORS: 'sfu_video_errors_total',
}

let VIDEO_METRICS;
const buildDefaultMetrics = () => {
  if (VIDEO_METRICS == null) {
    VIDEO_METRICS = {
      [SFUV_NAMES.SESSIONS]: new Gauge({
        name: SFUV_NAMES.SESSIONS,
        help: 'Number of active sessions in the video module',
      }),

      [SFUV_NAMES.REQS]: new Counter({
        name: SFUV_NAMES.REQS,
        help: 'Total requisitions received by the video module',
      }),

      [SFUV_NAMES.ERRORS]: new Counter({
        name: SFUV_NAMES.ERRORS,
        help: 'Total error responses generated by the video module',
        labelNames: ['method', 'errorCode'],
      }),
    }
  }

  return VIDEO_METRICS;
};

injectMetrics(buildDefaultMetrics());

module.exports = {
  SFUV_NAMES,
  VIDEO_METRICS,
  PrometheusAgent: VideoPrometheusAgent,
};
