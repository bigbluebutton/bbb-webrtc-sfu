const config = require('config');
const { Gauge, Counter, Histogram } = require('prom-client');
const { injectMetrics, AudioPrometheusAgent } = require('./index.js');
const USE_HOLD_HISTOGRAMS = config.has('prometheus.audio.holdHistograms')
  ? config.get('prometheus.audio.holdHistograms')
  : false

const SFUA_NAMES = {
  SESSIONS: 'sfu_audio_sessions',
  HELD_SESSIONS: 'sfu_audio_held_sessions',
  GLOBAL_AUDIO_SESSIONS: 'sfu_audio_global_sessions',
  GLOBAL_AUDIO_CRASHES: 'sfu_audio_global_crashes',
  REQS: 'sfu_audio_reqs_total',
  LISTEN_ONLY_TOGGLE_ERRORS: 'sfu_audio_listen_only_toggle_errors_total',
  ERRORS: 'sfu_audio_errors_total',
}

if (USE_HOLD_HISTOGRAMS) {
  SFUA_NAMES.TIME_TO_HOLD = 'sfu_audio_time_to_hold_seconds';
  SFUA_NAMES.TIME_TO_UNHOLD = 'sfu_audio_time_to_unhold_seconds';
}

let AUDIO_METRICS;
const buildDefaultMetrics = () => {
  if (AUDIO_METRICS == null) {
    AUDIO_METRICS = {
      [SFUA_NAMES.SESSIONS]: new Gauge({
        name: SFUA_NAMES.SESSIONS,
        help: 'Number of active sessions in the audio module',
      }),

      [SFUA_NAMES.HELD_SESSIONS]: new Gauge({
        name: SFUA_NAMES.HELD_SESSIONS,
        help: 'Number of held (listen only mode) sessions in the audio module',
      }),

      ...(
        SFUA_NAMES.TIME_TO_HOLD && {
          [SFUA_NAMES.TIME_TO_HOLD]: new Histogram({
            name: SFUA_NAMES.TIME_TO_HOLD,
            help: 'Time to hold (listen only mode on) in seconds',
            // Lower range 0.005s, upper range 0.1s, 10 bins
            buckets: [0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.04, 0.05, 0.075, 0.1],
          })
        }
      ),

      ...(
        SFUA_NAMES.TIME_TO_UNHOLD && {
          [SFUA_NAMES.TIME_TO_UNHOLD]: new Histogram({
            name: SFUA_NAMES.TIME_TO_UNHOLD,
            help: 'Time to unhold (listen only mode off) in seconds',
            // Lower range 0.015s, upper range 0.1s, 10 bins
            buckets: [0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.05, 0.065, 0.075, 0.1],
          }),
        }
      ),

      [SFUA_NAMES.GLOBAL_AUDIO_SESSIONS]: new Gauge({
        name: SFUA_NAMES.GLOBAL_AUDIO_SESSIONS,
        help: 'Number of active global audio bridges in the audio module',
      }),

      [SFUA_NAMES.GLOBAL_AUDIO_CRASHES]: new Counter({
        name: SFUA_NAMES.GLOBAL_AUDIO_CRASHES,
        help: 'Total number of global audio bridge crashes in the audio module',
        labelNames: ['errorCode'],
      }),

      [SFUA_NAMES.REQS]: new Counter({
        name: SFUA_NAMES.REQS,
        help: 'Total requisitions received by the audio module',
      }),

      [SFUA_NAMES.LISTEN_ONLY_TOGGLE_ERRORS]: new Counter({
        name: SFUA_NAMES.LISTEN_ONLY_TOGGLE_ERRORS,
        help: 'Total errors generated when switching between audio modes',
        labelNames: ['errorCode'],
      }),

      [SFUA_NAMES.ERRORS]: new Counter({
        name: SFUA_NAMES.ERRORS,
        help: 'Total error responses generated by the audio module',
        labelNames: ['method', 'errorCode'],
      }),
    }
  }

  return AUDIO_METRICS;
};

injectMetrics(buildDefaultMetrics());

module.exports = {
  SFUA_NAMES,
  AUDIO_METRICS,
  PrometheusAgent: AudioPrometheusAgent,
};
